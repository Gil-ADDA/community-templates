apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: exciting-turing-4c7001
spec:
    color: '#8e1fc3'
    description: track data usage and limit events
    name: usage_dashboard
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: vivid-gauss-8c7001
spec:
    associations:
      - kind: Label
        name: exciting-turing-4c7001
    every: 1h0m0s
    name: Cardinality Limit Alert (usage dashboard)
    offset: 5m0s
    query: |-
        import "array"
        import "experimental/usage"
        import "slack"



        slackWebhook = "https://hooks.slack.com/services/####/####/####"
        slackChannel = ""
        alert = (eventValue, threshold) =>
        	(if eventValue >= threshold then slack.message(
        		url: slackWebhook,
        		channel: slackChannel,
        		text: "A Cardinality Event has occured! The number of cardinality events = \"${string(v: eventValue)}\".",
        		color: "warning",
        	) else 0)
        data_0 = array.from(rows: [{_value: 0}])
        data = usage.from(start: -1h, stop: now())
        	|> filter(fn: (r) =>
        		(r._measurement == "events" and r._field == "event_type_limited_cardinality" and exists r._value))
        	|> sum()
        events = union(tables: [data_0, data])
        	|> group()
        	|> sum()
        	|> findRecord(fn: (key) =>
        		(true), idx: 0)
        eventTotal = events._value

        array.from(rows: [{value: 0}])
        	|> yield(name: "ignore")
        alert(eventValue: eventTotal, threshold: 1)
    status: active
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: stupefied-dirac-cc7001
spec:
    associations:
      - kind: Label
        name: exciting-turing-4c7001
    charts:
      - colors:
          - hex: '#292933'
            id: base
            name: castle
            type: background
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: .
        note: |-
            Read more about data usage for your InfluxDB Cloud account here:

            https://docs.influxdata.com/influxdb/cloud/account-management/data-usage/
        queries:
          - query: |-
                import "array"
                array.from(rows: [{_value: "Usage"}])
        staticLegend: {}
        width: 12
      - height: 1
        kind: Markdown
        name: Name this Cell
        note: '## Data In'
        staticLegend: {}
        width: 3
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            id: d1ab6056-91ca-4130-897d-6ef27245fd0e
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            id: 9bad27d3-10b9-4617-80f2-3473f99ad53c
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            id: 34b83af2-0cb2-40ab-8ed0-4ff2335d6afc
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        hoverDimension: auto
        kind: Xy
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Data In (Graph)
        position: overlaid
        queries:
          - query: |-
                import "csv"
                import "math"
                import "date"
                import "strings"
                import "experimental/json"
                import "experimental/usage"

                usage.from(
                    start: v.timeRangeStart,
                    stop: v.timeRangeStop,
                )
                   |> filter(fn: (r) =>
                      r._measurement == "http_request"
                      and (r.endpoint == "/api/v2/write" or r.endpoint == "/write")
                      and r._field == "req_bytes"
                    )
                    |> group()
                    |> keep(columns: ["_value", "_field", "_time"])
                    |> fill(column: "_value", value: 0)
                    |> sort(columns: ["_time"], desc: true)
                    |> map(fn: (r) =>
                      ({r with
                        write_mb: math.round(x: float(v: r._value) / 10000.0) / 100.0
                      }))
        staticLegend: {}
        width: 3
        xCol: _time
        yCol: _value
        yPos: 2
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Data In (total)
        queries:
          - query: |-
                import "csv"
                import "math"
                import "date"
                import "strings"
                import "experimental/json"
                import "experimental/usage"

                usage.from(
                    start: v.timeRangeStart,
                    stop: v.timeRangeStop,
                )
                   |> filter(fn: (r) =>
                      r._measurement == "http_request"
                      and (r.endpoint == "/api/v2/write" or r.endpoint == "/write")
                      and r._field == "req_bytes"
                    )
                    |> group()
                    |> keep(columns: ["_value", "_field", "_time"])
                    |> fill(column: "_value", value: 0)
                    |> map(fn: (r) =>
                      ({r with
                        write_mb: math.round(x: float(v: r._value) / 10000.0) / 100.0
                      }))
                    |> sort(columns: ["_time"])
                    |> group()
                    |> sum(column: "write_mb")
        staticLegend: {}
        suffix: ' MB'
        width: 3
        yPos: 5
      - colors:
          - hex: '#292933'
            id: base
            name: castle
            type: background
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: .
        queries:
          - query: |-
                import "array"
                array.from(rows: [{_value: "Rate Limiting Events"}])
        staticLegend: {}
        width: 12
        yPos: 6
      - height: 4
        kind: Markdown
        name: Name this Cell
        note: "## Limit Events\nIf you exceed your plan's limits, the event will be
            logged to help you track when the events occur. For more information on
            your rate limits, check out our documentation. \n\nhttps://docs.influxdata.com/influxdb/cloud/account-management/data-usage/#exceeded-rate-limits"
        staticLegend: {}
        width: 3
        yPos: 7
      - height: 1
        kind: Markdown
        name: Name this Cell
        note: '## Query Count'
        staticLegend: {}
        width: 3
        xPos: 3
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            id: d1ab6056-91ca-4130-897d-6ef27245fd0e
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            id: 9bad27d3-10b9-4617-80f2-3473f99ad53c
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            id: 34b83af2-0cb2-40ab-8ed0-4ff2335d6afc
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        hoverDimension: auto
        kind: Xy
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Query Count (chart)
        position: overlaid
        queries:
          - query: "import \"experimental/json\"\nimport \"experimental/usage\"\n\nusage.from(\n
                \   start: v.timeRangeStart,\n    stop: v.timeRangeStop,\n)\n   |>
                range(start: v.timeRangeStart)\n  |> filter(fn: (r) =>\n      r._measurement
                == \"query_count\"\n    )\n    |> keep(columns: [\"_value\", \"_field\",
                \"_time\"])\n |> sort(columns: [\"_time\"], desc: false)   \n\n\n
                \ |> aggregateWindow(every: 1h, fn: sum)"
        staticLegend: {}
        width: 3
        xCol: _time
        xPos: 3
        yCol: _value
        yPos: 2
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: Query Count (total)
        queries:
          - query: |-
                import "csv"
                import "math"
                import "date"
                import "strings"
                import "experimental/json"
                import "experimental/usage"

                usage.from(
                    start: v.timeRangeStart,
                    stop: v.timeRangeStop,
                )
                //   |> range(start: 2021-03-01T00:00:00.000Z)
                  |> filter(fn: (r) =>
                      r._measurement == "query_count"
                    )
                    |> group(columns: ["_time"])
                    |> sum()
                    |> group()
                    |> rename(columns: {_value: "query_count"})
                    |> sort(columns: ["_time"])
                    |> group()
                    |> sum(column: "query_count")
        staticLegend: {}
        width: 3
        xPos: 3
        yPos: 5
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            id: d1ab6056-91ca-4130-897d-6ef27245fd0e
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            id: 9bad27d3-10b9-4617-80f2-3473f99ad53c
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            id: 34b83af2-0cb2-40ab-8ed0-4ff2335d6afc
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        hoverDimension: auto
        kind: Xy
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Rate limit events
        position: overlaid
        queries:
          - query: "import \"csv\"\nimport \"math\"\nimport \"date\"\nimport \"strings\"\nimport
                \"experimental/json\"\nimport \"experimental/usage\"\n\nusage.from(\n
                \   start: v.timeRangeStart,\n    stop: v.timeRangeStop,\n)\n  |>
                range(start: v.timeRangeStart)\n  |> filter(fn: (r) =>\n      r._measurement
                == \"events\"\n    )\n  |> sort(columns: [\"_time\"], desc: false)
                \ \n  |> aggregateWindow(every: v.windowPeriod, fn: sum)"
        staticLegend: {}
        width: 7
        xCol: _time
        xPos: 3
        yCol: _value
        yPos: 7
      - height: 1
        kind: Markdown
        name: Name this Cell
        note: '## Storage'
        staticLegend: {}
        width: 3
        xPos: 6
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            id: 7c77a95f-a64a-495a-978c-25e8832a0354
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            id: 1260c710-6b93-40a6-902b-03439ec4d360
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            id: 169bc181-4082-486b-948e-8496315c097c
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        hoverDimension: auto
        kind: Xy
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Storage (By Bucket)
        position: overlaid
        queries:
          - query: "import \"experimental/usage\"\n\n//Data returned from usage.from()
                uses the ID value for the buckets. This function will remap the data
                to use the name of the bucket\nb = buckets()\nbucketNameForID = (id)
                => {\n    row = b \n        |> filter(fn: (r) => r.id == id) \n        |>
                findRecord(fn: (key) => true, idx: 0)\n    return row.name\n}\n\nbucket_ids
                = b \n    |> findColumn(fn: (key) => true, column: \"id\")\n\ndata_buckets
                = usage.from(start: v.timeRangeStart,\n    stop: v.timeRangeStop)
                \n    |> filter(fn: (r) => r._measurement == \"storage_usage_bucket_bytes\")\n
                \   |> map(fn: (r) => ({ r with bucket_name: if contains(value: r.bucket_id,
                set: bucket_ids) then bucketNameForID(id: r.bucket_id) else \"unknown
                bucket\"}))\n    |> keep(columns: [\"_time\", \"_value\", \"bucket_id\",
                \"bucket_name\"])\n    |> group(columns: [\"bucket_name\"])\n\ndata_all
                = data_buckets\n    |> group(columns: [\"_time\"])\n    |> sum()\n
                \   |> group()\n    |> set(key: \"bucket_name\", value: \"all buckets\")\n\nunion(tables:
                [data_buckets, data_all])\n    |> group(columns: [\"bucket_name\"])"
        staticLegend: {}
        width: 3
        xCol: _time
        xPos: 6
        yCol: _value
        yPos: 2
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Storage (total)
        queries:
          - query: |-
                import "csv"
                import "math"
                import "date"
                import "strings"
                import "experimental/json"
                import "experimental/usage"

                usage.from(
                    start: v.timeRangeStart,
                    stop: v.timeRangeStop,
                )
                  |> filter(fn: (r) => r._measurement == "storage_usage_bucket_bytes" and r._field == "gauge")
                    |> range(start: 2021-03-01T00:00:00.000Z)
                    |> aggregateWindow(every: 1h, fn: mean)
                    |> fill(column: "_value", value: 0.0)
                    |> group()
                    |> sum()
                    |> map(fn: (r) =>
                      ({r with
                        _value: math.round(x: float(v: r._value) / 10000000.0) / 100.0
                      })
                    )
        staticLegend: {}
        suffix: ' GB-hr'
        width: 3
        xPos: 6
        yPos: 5
      - height: 1
        kind: Markdown
        name: Name this Cell
        note: '## Data Out'
        staticLegend: {}
        width: 3
        xPos: 9
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            id: d1ab6056-91ca-4130-897d-6ef27245fd0e
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            id: 9bad27d3-10b9-4617-80f2-3473f99ad53c
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            id: 34b83af2-0cb2-40ab-8ed0-4ff2335d6afc
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        hoverDimension: auto
        kind: Xy
        legendColorizeRows: true
        legendOpacity: 1
        legendOrientationThreshold: 1e+08
        name: Data Out (chart)
        position: overlaid
        queries:
          - query: |-
                import "experimental/usage"
                import "math"

                usage.from(
                    start: v.timeRangeStart,
                    stop: v.timeRangeStop
                )
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) =>
                      r._measurement == "http_request"
                      and r._field == "resp_bytes"
                      and (r.endpoint == "/api/v2/query" or r.endpoint == "/query")
                    )
                    |> keep(columns: ["_value", "status", "_time"])
        staticLegend: {}
        width: 3
        xCol: _time
        xPos: 9
        yCol: _value
        yPos: 2
      - colors:
          - hex: '#00C9FF'
            id: base
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Data Out (total)
        queries:
          - query: |-
                import "csv"
                import "math"
                import "date"
                import "strings"
                import "experimental/json"
                import "experimental/usage"

                usage.from(
                    start: v.timeRangeStart,
                    stop: v.timeRangeStop,
                )
                  |> range(start: 2021-03-01T00:00:00.000Z)
                  |> filter(fn: (r) =>
                      r._measurement == "http_request"
                      and r._field == "resp_bytes"
                      and (r.endpoint == "/api/v2/query" or r.endpoint == "/query")
                    )
                    |> group()
                    |> aggregateWindow(every: 1h, fn: sum)
                    |> keep(columns: ["_value", "_field", "_time"])
                    |> fill(column: "_value", value: 0)
                    |> map(fn: (r) =>
                    ({r with
                      reads_gb: math.round(x: float(v: r._value) / 10000000.0) / 100.0
                    }))
                    |> sort(columns: ["_time"])
                //     |> yield(name: "reads_gb")
                    |> group()
                    |> sum(column: "reads_gb")
        staticLegend: {}
        suffix: ' GB'
        width: 3
        xPos: 9
        yPos: 5
      - colors:
          - hex: '#7CE490'
            id: base
            name: honeydew
            type: text
          - hex: '#FFD255'
            id: cef71a4e-01c4-4bfd-b6e5-b9efdd45eb4b
            name: thunder
            type: text
            value: 1
          - hex: '#DC4E58'
            id: 6dcd6eb7-6357-4c46-a58e-40730f83c7a5
            name: fire
            type: text
            value: 25
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: Write limiting events
        queries:
          - query: |-
                import "array"
                import "experimental/json"
                import "experimental/usage"


                data_0 = array.from(rows:[{_value: 0}])
                data = usage.from(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "events" and r._field == "event_type_limited_write")
                  |> sum(column: "_value")
                union(tables: [data_0, data])
        staticLegend: {}
        width: 2
        xPos: 10
        yPos: 7
      - colors:
          - hex: '#7CE490'
            id: base
            name: honeydew
            type: text
          - hex: '#FFD255'
            id: 5875d68f-6db1-45c1-9362-5f7657d80b09
            name: thunder
            type: text
            value: 1
          - hex: '#DC4E58'
            id: 3839be0b-7560-471f-9ae9-32a5d69326ca
            name: fire
            type: text
            value: 25
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: Query limiting events
        queries:
          - query: |-
                import "array"
                import "experimental/json"
                import "experimental/usage"


                data_0 = array.from(rows:[{_value: 0}])
                data = usage.from(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "events" and r._field == "event_type_limited_query")
                  |> sum(column: "_value")
                union(tables: [data_0, data])
        staticLegend: {}
        width: 2
        xPos: 10
        yPos: 8
      - colors:
          - hex: '#7CE490'
            id: base
            name: honeydew
            type: text
          - hex: '#DC4E58'
            id: 7703a558-41b9-4f6e-82c2-452a2d7fd199
            name: fire
            type: text
            value: 1
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: Cardinality limiting events
        queries:
          - query: |-
                import "array"
                import "experimental/json"
                import "experimental/usage"


                data_0 = array.from(rows:[{_value: 0}])
                data = usage.from(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "events" and r._field == "event_type_limited_cardinality")
                  |> sum(column: "_value")
                union(tables: [data_0, data])
        staticLegend: {}
        width: 2
        xPos: 10
        yPos: 9
      - colors:
          - hex: '#4591ED'
            id: base
            name: ocean
            type: text
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: Cardinality limit
        note: |-
            Read more about series cardinality here:

            https://docs.influxdata.com/influxdb/cloud/write-data/best-practices/resolve-high-cardinality/
        queries:
          - query: |-
                import "experimental/usage"
                import "csv"
                limits = usage.limits()
                csvData = "#datatype,string,long,string
                #group,false,false,false
                #default,,,
                ,result,table,column
                ,,0,*
                "
                csv.from(csv: csvData)
                  |> map(fn: (r) => ({
                    cardinality: limits.rate.cardinality
                  }))
        staticLegend: {}
        width: 2
        xPos: 10
        yPos: 10
    description: Track your InfluxDB Cloud data usage and limit events
    name: Usage Dashboard
